
services:
  register-service:
    build: 
      context: ./services/user/register-service
    container_name: register_service
    volumes:
      - ./shared/db:/app/data
      - ./shared/certs:/app/certs:ro
      - user_shared:/app/shared
    environment:
      - NODE_ENV=development
      - JWT_SECRETKEY=${JWT_SECRETKEY}
      - SSL_KEY=${SSL_KEY}
      - SSL_CERT=${SSL_CERT}
      - API_GATEWAY_KEY=${API_GATEWAY_KEY}
      - NATS_URL=${NATS_URL}
    networks:
      - transcendence-network
    depends_on:
      database_certs-init:
        condition: service_completed_successfully
      user-database:
        condition: service_started

  auth-service:
    build:
      context: ./services/user/auth-service
    container_name: auth_service
    volumes:
      - ./shared/db:/app/data
      - ./shared/certs:/app/certs:ro
      - user_shared:/app/shared
      - cdn_data:/app/cdn_data
    environment:
      - NODE_ENV=development
      - JWT_SECRETKEY=${JWT_SECRETKEY}
      - SSL_KEY=${SSL_KEY}
      - SSL_CERT=${SSL_CERT}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - FT_API_UID=${FT_API_UID}
      - FT_API_SECRET=${FT_API_SECRET}
      - API_GATEWAY_KEY=${API_GATEWAY_KEY}
      - NATS_URL=${NATS_URL}
      - CDN_URL=${CDN_URL}
    networks:
      - transcendence-network
    depends_on:
      database_certs-init:
        condition: service_completed_successfully
      user-database:
        condition: service_started

  update_user_info-service:
    build:
      context: ./services/user/update_user_info-service
    container_name: update_user_info_service
    volumes:
      - ./shared/db:/app/data
      - ./shared/certs:/app/certs:ro
      - user_shared:/app/shared
    environment:
      - NODE_ENV=development
      - SSL_KEY=${SSL_KEY}
      - SSL_CERT=${SSL_CERT}
      - API_GATEWAY_KEY=${API_GATEWAY_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - NATS_URL=${NATS_URL}
    networks:
      - transcendence-network
    depends_on:
      database_certs-init:
        condition: service_completed_successfully
      user-database:
        condition: service_started

  friends-service:
    build:
      context: ./services/user/friends-service
    container_name: friends_service
    volumes:
      - ./shared/db:/app/data
      - ./shared/certs:/app/certs:ro
      - user_shared:/app/shared
    environment:
      - NODE_ENV=development
      - SSL_KEY=${SSL_KEY}
      - SSL_CERT=${SSL_CERT}
      - API_GATEWAY_KEY=${API_GATEWAY_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - NATS_URL=${NATS_URL}
    networks:
      - transcendence-network
    restart: always
    depends_on:
      database_certs-init:
        condition: service_completed_successfully
      user-database:
        condition: service_started

  get-info-service:
    build:
      context: ./services/user/get-info-service
    container_name: get_info_service
    volumes:
      - ./shared/db:/app/data
      - ./shared/certs:/app/certs:ro
      - user_shared:/app/shared
    environment:
      - NODE_ENV=development
      - SSL_KEY=${SSL_KEY}
      - SSL_CERT=${SSL_CERT}
      - API_GATEWAY_KEY=${API_GATEWAY_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - NATS_URL=${NATS_URL}
    networks:
      - transcendence-network
    depends_on:
      database_certs-init:
        condition: service_completed_successfully
      user-database:
        condition: service_started

  user-database:
    build: 
      context: ./services/user/user-database
    container_name: user_database
    volumes:
      - ./shared/db:/app/data
      - ./shared/certs:/app/certs:ro
      - user_shared:/app/shared
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL}
      - NATS_URL=${NATS_URL}
    networks:
      - transcendence-network
    depends_on:
      database_certs-init:
        condition: service_completed_successfully

  api-gateway:
    build:
      context: ./gateway
    container_name: api_gateway
    ports:
      - "3000:3000"
    volumes:
      - ./shared/certs:/app/certs:ro
    environment:
      - NODE_ENV=development
      - SSL_KEY=${SSL_KEY}
      - SSL_CERT=${SSL_CERT}
      - API_GATEWAY_KEY=${API_GATEWAY_KEY}
    networks:
      - transcendence-network
    depends_on:
      database_certs-init:
          condition: service_completed_successfully

  notifications-manager:
    build:
      context: ./services/notifications/notifications-manager
    volumes:
      - ./services/notifications/notifications-manager/src:/app/src
      - ./services/notifications/notifications-manager/package.json:/app/package.json
      - ./services/notifications/notifications-manager/.env.example:/app/.env
    environment:
      - NODE_ENV=development
      - JWT_SECRETKEY=${JWT_SECRETKEY}
      - SSL_KEY=${SSL_KEY}
      - SSL_CERT=${SSL_CERT}
      - API_GATEWAY_KEY=${API_GATEWAY_KEY}
      - NATS_URL=${NATS_URL}
    ports:
      - "7001:7001"
      - "7011:7011"
    restart: always
    depends_on:
      database_certs-init:
        condition: service_completed_successfully
      user-database:
        condition: service_started
    networks:
      - transcendence-network

  docs-service:
    build:
      context: ./doc/doc_API
    container_name: docs_service
    ports:
      - "3001:3001"
    volumes:
      - ./shared/certs:/app/certs:ro
    environment:
      - NODE_ENV=development
      - SSL_KEY=${SSL_KEY}
      - SSL_CERT=${SSL_CERT}
      - API_GATEWAY_KEY=${API_GATEWAY_KEY}
    networks:
      - transcendence-network
    depends_on:
      database_certs-init:
        condition: service_completed_successfully
      api-gateway:
        condition: service_started
      auth-service:
        condition: service_started
      register-service:
        condition: service_started
      update_user_info-service:
        condition: service_started
        
  database_certs-init:
    build:
      context: ./database_certs-init
    container_name: database_certs_init
    volumes:
      - ./shared/db:/app/data
      - ./shared/certs:/app/certs
    environment:
      - NODE_ENV=development
      - SSL_KEY=${SSL_KEY}
      - SSL_CERT=${SSL_CERT}
    networks:
      - transcendence-network
  
  cdn:
    build: ./services/cdn
    container_name: cdn
    volumes:
      - ./shared/certs:/app/certs:ro
      - cdn_data:/usr/share/nginx/html
    ports:
      - "3002:443"
    restart: unless-stopped

volumes:
  user_shared:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./services/user/shared
  cdn_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./services/cdn/public

networks:
  transcendence-network:
    driver: bridge