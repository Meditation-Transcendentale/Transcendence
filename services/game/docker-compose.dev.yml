services:
  nats_game:
    image: nats:latest
    container_name: nats_game
    environment:
      - NATS_GAME_TOKEN=${NATS_GAME_TOKEN}
    volumes:
      - ./services/game/nats-server.conf:/nats-server.conf:ro
      - ./shared/certs:/etc/certs:ro
    command: ["-c", "/nats-server.conf"]
    networks:
      - game-network
    depends_on:
      database_certs-init:
        condition: service_completed_successfully


  lobby-manager:
    container_name: lobby_manager
    build:
      context: ./services/game/lobby-manager
    volumes:
      - ./services/game/lobby-manager/src:/app/src
      # - ./lobby-manager/test:/app/test
      - ./services/game/lobby-manager/package.json:/app/package.json
      - ./services/game/lobby-manager/.env.example:/app/.env
      - ./services/user/shared:/usr/src/app/shared
      - ./shared/certs:/app/certs:ro

    depends_on:
      nats_game:
        condition: service_started
      database_certs-init:
        condition: service_completed_successfully
    command: npm run dev
    environment:
      - NATS_URL=${NATS_GAME_URL}
      - NATS_GAME_TOKEN=${NATS_GAME_TOKEN}
      - SSL_KEY=${SSL_KEY}
      - SSL_CERT=${SSL_CERT}
      - API_GATEWAY_KEY=${API_GATEWAY_KEY}
      - PORT=5001
    ports:
      - "5001:5001"
      - "5011:5011"
    networks:
      - game-network
      - transcendence-network

  game-manager:
    container_name: game_manager
    build: ./services/game/game-manager
    volumes:
      - ./services/game/game-manager/src:/app/src
      - ./services/game/game-manager/test:/app/test
      - ./services/game/game-manager/package.json:/app/package.json
      - ./services/game/game-manager/.env.example:/app/.env
      - ./shared/certs:/app/certs:ro
    restart: unless-stopped
    environment:
      - SERVICE_NAME=game-manager
      - NATS_URL=${NATS_GAME_URL}
      - NATS_GAME_TOKEN=${NATS_GAME_TOKEN}
      - SSL_KEY=${SSL_KEY}
      - SSL_CERT=${SSL_CERT}
      # - PORT=5003
    ports:
      - "5003:5003"
      # - "5050:5050" # For metrics
    networks:
      - game-network
      - metrics-network
    depends_on:
      database_certs-init:
        condition: service_completed_successfully
      nats_game:
        condition: service_started

  user-interface:
    container_name: user_interface
    build: ./services/game/user-interface
    volumes:
      - ./services/game/user-interface/src:/app/src
      - ./services/game/user-interface/test:/app/test
      - ./services/game/user-interface/package.json:/app/package.json
      - ./services/game/user-interface/.env.example:/app/.env
      - ./shared/certs:/app/certs:ro
    command: npm run start
    ports:
    - "5004:5004"
    # - "5051:5051" # For metrics
    restart: unless-stopped
    environment:
      - SERVICE_NAME=user-interface
      - NATS_URL=${NATS_GAME_URL}
      - NATS_GAME_TOKEN=${NATS_GAME_TOKEN}
      - SSL_KEY=${SSL_KEY}
      - SSL_CERT=${SSL_CERT}
    depends_on:
      database_certs-init:
        condition: service_completed_successfully
      nats_game:
        condition: service_started
    networks:
      - game-network
      - transcendence-network
      - metrics-network
    

  pong-physics:
    container_name: pong_physics
    build: ./services/game/pong-physics
    volumes:
      - ./services/game/pong-physics/src:/app/src
      - ./services/game/pong-physics/test:/app/test
      - ./services/game/pong-physics/package.json:/app/package.json
      - ./services/game/pong-physics/.env.example:/app/.env
      - ./shared/certs:/app/certs:ro
    # command: npm run dev
    restart: unless-stopped
    environment:
      - SERVICE_NAME=pong-physics
      - NATS_URL=${NATS_GAME_URL}
      - NATS_GAME_TOKEN=${NATS_GAME_TOKEN}
      - SSL_KEY=${SSL_KEY}
      - SSL_CERT=${SSL_CERT}
    # ports:
    # - "5052:5052" # For metrics
    depends_on:
      database_certs-init:
        condition: service_completed_successfully
      nats_game:
        condition: service_started
    networks:
      - game-network
      - metrics-network

  pongbr-physics:
    container_name: pongBR_physics
    build: ./services/game/pongBR-physics
    volumes:
      # - ./profiler-logs:/app/profiler-logs
      - ./services/game/pongBR-physics/src:/app/src
      - ./services/game/pongBR-physics/test:/app/test
      - ./services/game/pongBR-physics/package.json:/app/package.json
      - ./services/game/pongBR-physics/.env.example:/app/.env
      - ./shared/certs:/app/certs:ro
    # command: npm run dev
    # ports:
    # - "5053:5053" # For metrics
    restart: unless-stopped
    environment:
      - SERVICE_NAME=pongBR-physics
      - NATS_URL=${NATS_GAME_URL}
      - NATS_GAME_TOKEN=${NATS_GAME_TOKEN}
      - SSL_KEY=${SSL_KEY}
      - SSL_CERT=${SSL_CERT}
    depends_on:
      database_certs-init:
        condition: service_completed_successfully
      nats_game:
        condition: service_started
    networks:
      - game-network
      - metrics-network

  ai:
    container_name: ai_service
    build: ./services/game/ai
    volumes:
      - ./services/game/ai/src:/app/src
      - ./services/game/ai/test:/app/test
      - ./services/game/ai/package.json:/app/package.json
      - ./services/game/ai/.env.example:/app/.env
    command: npm run dev
    restart: unless-stopped
    environment:
      - SERVICE_NAME=ai
      - NATS_URL=${NATS_GAME_URL}
      - NATS_GAME_TOKEN=${NATS_GAME_TOKEN}
    depends_on:
      - nats_game
    networks:
      - game-network

  tournament:
    container_name: tournament
    build:
      context: ./services/game/tournament
    volumes:
      - ./services/game/tournament/src:/app/src
      # - ./tournament/test:/app/test
      - ./services/game/tournament/package.json:/app/package.json
      - ./services/game/tournament/.env.example:/app/.env
      - ./services/user/shared:/usr/src/app/shared
      - ./shared/certs:/app/certs:ro

    depends_on:
      nats_game:
        condition: service_started
      database_certs-init:
        condition: service_completed_successfully
    command: npm run dev
    environment:
      - NATS_URL=${NATS_GAME_URL}
      - NATS_GAME_TOKEN=${NATS_GAME_TOKEN}
      - SSL_KEY=${SSL_KEY}
      - SSL_CERT=${SSL_CERT}
      - API_GATEWAY_KEY=${API_GATEWAY_KEY}
      - PORT=5009
    ports:
      - "5009:5009"
      - "5019:5019"
    networks:
      - game-network
      - transcendence-network


networks:
  game-network:
    driver: bridge
