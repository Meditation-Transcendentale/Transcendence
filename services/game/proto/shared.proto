syntax = "proto3";

package shared;

import "google/protobuf/empty.proto";

// -----------------------------------------------------------------------------
// Core shared types (reused across services)
// -----------------------------------------------------------------------------
message Ball {
  int32 id = 1;
  float x = 2;
  float y = 3;
  float vx = 4;
  float vy = 5;
  bool disabled = 6;
}

message Paddle {
  int32 id = 1;
  int32 playerId = 2;
  int32 move = 3; // -1: left, 0: none, 1: right
  float offset = 4;
  bool dead = 5; // Used in battle‐royale mode, false otherwise
}

message PaddleInput {
  int32 id = 1;
  int32 move = 2;
}

message Goal { int32 scorerId = 1; }

// Game events for phase transitions
message GameEvent {
  string type = 1;           // PHASE_TRANSITION, REBUILD_COMPLETE, etc.
  string phase = 2;          // Phase name
  int32 remainingPlayers = 3;
  int64 timestamp = 4;
  repeated int32 activePlayers = 5;
  map<int32, int32> playerMapping = 6; // originalPlayerId -> newPaddleIndex
}

// Game state information
message GameStateInfo {
  repeated int32 activePlayers = 1;
  repeated int32 eliminatedPlayers = 2;
  string currentPhase = 3;
  bool isRebuilding = 4;
  int64 rebuildTimeRemaining = 5;
  map<int32, int32> playerMapping = 6;
  bool isGameOver = 7;
  int32 winner = 8;
}

message MatchState {
  string gameId = 1;
  int64 tick = 2;
  repeated Ball balls = 3; // One ball for classic, multiple for BR
  repeated Paddle paddles = 4;
  repeated int32 score = 5; // Classic: scores per player
  repeated int32 ranks = 6; // BR: ranking per player
  int32 stage = 7;          // BR: current stage; others: ignored
  repeated GameEvent events = 8; // Phase transition events
  GameStateInfo gameState = 9;   // Current game state
}

message MatchCreateRequest {
  repeated string players = 1; // Array of player UUIDs
}

message MatchCreateResponse {
  string gameId = 1; // Newly created game’s ID
}

message MatchSetup {
  repeated string players = 1; // Player UUIDs
}

message MatchInput {
  int32 paddleId = 1;
  int32 move = 2;
}

message MatchQuit { string uuid = 1; }

message MatchStart {}

message MatchScoreUpdate {
  repeated int32 score = 1;
}

message MatchEnd { 
  string winnerId = 1;
  string loserId = 2;
  repeated int32 score = 3;
  string forfeitId = 4;
}

message PhysicsRequest {
  string gameId = 1;
  int64 tick = 2;
  repeated PaddleInput input = 3;
  int32 stage = 4; // BR mode stage; others: ignored
}
