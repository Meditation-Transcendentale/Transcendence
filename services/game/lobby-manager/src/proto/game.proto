syntax = "proto3";

package shared;

import "google/protobuf/empty.proto";

// -----------------------------------------------------------------------------
// Core shared types (reused across services)
// -----------------------------------------------------------------------------

message Ball {
  int32 id = 1;
  int32 x = 2;
  int32 y = 3;
  int32 vx = 4;
  int32 vy = 5;
}

message Paddle {
  int32 id = 1;
  float move = 2; // -1: left, 0: none, 1: right
  bool dead = 3;  // Used in battle royale mode, false otherwise
}

message PaddleInput {
  int32 id = 1;
  int32 move = 2;
}

message Goal { int32 scorerId = 1; }

message MatchState {
  string gameId = 1;
  int64 tick = 2;
  repeated Ball balls = 3; // One ball for classic, multiple for BR
  repeated Paddle paddles = 4;
  repeated int32 score = 5; // Classic: scores per player
  repeated int32 ranks = 6; // BR mode: ranking per player
  int32 stage = 7;          // BR: current stage; others: ignored
}

message MatchCreateRequest {
  repeated string players = 1; // Array of player UUIDs
}

message MatchCreateResponse {
  string gameId = 1; // Newly created gameâ€™s ID
}

message MatchSetup {
  repeated string players = 1; // Player UUIDs
}

message MatchInput {
  int32 paddleId = 1;
  int32 move = 2;
}

message MatchQuit { string uuid = 1; }

message MatchStart {}
message MatchEnd { int32 winner = 1; }

// -----------------------------------------------------------------------------
// User / Lobby specific types
// -----------------------------------------------------------------------------

message UserStatus {
  string uuid = 1;
  string lobbyId = 2;
  string status = 3;
}

message QuitMessage {
  string uuid = 1;
  string lobbyId = 2;
}

message ReadyMessage { string lobbyId = 1; }

message ErrorMessage { string message = 1; }

message StartMessage {
  string lobbyId = 1;
  string gameId = 2;
  string map = 3;
}

message Player {
  string uuid = 1;
  bool ready = 2;
}

message UpdateMessage {
  string lobbyId = 1;
  repeated Player players = 2;
  string status = 3;
  string mode = 4;
  string map = 5;
  string gameId = 6;
  string tournamentId = 7;
  int32 currentPlayers = 8;
  int32 maxPlayers = 9;
}

// -----------------------------------------------------------------------------
// Game Client Specific Messages
// -----------------------------------------------------------------------------

message PaddleUpdate {
  int32 paddleId = 1;
  int32 move = 2;
}

message WelcomeMessage { int32 paddleId = 1; }

message GameStartMessage {}

message GameEndMessage { repeated int32 score = 1; }

message StateMessage { MatchState state = 1; }

message ClientMessage {
  oneof payload {
    PaddleUpdate paddleUpdate = 1;
    QuitMessage quit = 2;
    ReadyMessage ready = 3;
    MatchQuit spectate = 4;
  }
}

message ServerMessage {
  oneof payload {
    ErrorMessage error = 1;
    WelcomeMessage welcome = 2;
    GameStartMessage start = 3;
    StateMessage state = 4;
    GameEndMessage end = 5;
  }
}

message PhysicsRequest {
  string gameId = 1;
  int64 tick = 2;
  repeated PaddleInput input = 3;
  int32 stage = 4;
}

message PhysicsResponse {
  string gameId = 1;
  int64 tick = 2;
  repeated Ball balls = 3;
  repeated Paddle paddles = 4;
  Goal goal = 5;
}
