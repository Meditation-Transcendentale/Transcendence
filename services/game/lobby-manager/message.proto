syntax = "proto3";
package Pong;

// ─── Domain Objects ───────────────────────────────────────────────────────────

// A single ball’s state
message Ball {
  uint32 id = 1;    // 32-bit unsigned
  int32  x  = 2;    // fixed-point position
  int32  y  = 3;
  int32  vx = 4;    // fixed-point velocity
  int32  vy = 5;
}

// A single paddle’s state
message Paddle {
  uint32 id          = 1;
  int32  offset      = 2;  // fixed-point
  bool   isConnected = 3;
}

// A single score entry
message ScoreEntry {
  uint32 playerId = 1;
  uint32 score    = 2;
}

// The full snapshot of game state
message FullState {
  uint32            gameId     = 1;
  uint32            tick       = 2;
  repeated Ball     balls      = 3;
  repeated Paddle   paddles    = 4;
  bool              isPaused   = 5;
  bool              isGameOver = 6;
  repeated ScoreEntry scores   = 7;
}

// ─── Player Input (for physics & match.input) ─────────────────────────────────
message PlayerInput {
  string playerId = 1;
  float  x        = 2;
  float  y        = 3;
}

// ─── Match Creation (lobby ↔ game-manager) ────────────────────────────────────
// Request
message MatchCreateRequest {
  string mode                   = 1;            // "pong", "pongio", or "pongbr"
  repeated string players       = 2;            // user IDs
  map<string,string> options    = 3;           // any key/value overrides
}
// Reply
message MatchCreateResponse {
  string gameId = 1;
  string error  = 2;                        // optional error message
}

// ─── Physics Tick (game-manager ↔ physics-service) ──────────────────────────
// Request
message PhysicsRequest {
  string                gameId    = 1;
  repeated PlayerInput  inputs    = 2;
  FullState             lastState = 3;
}
// Reply
message PhysicsResponse {
  FullState newState = 1;
  string    error    = 2;                  // optional error
  bool      goalScored = 3;    // true if a goal happened this tick
  string    scorerId   = 4;    // which player scored
}

// ─── State Broadcast (game-manager → ui-service) ─────────────────────────────
message StateUpdate {
  FullState state = 1;
}

// ─── State Broadcast (game-manager → ui-service) ─────────────────────────────
message MatchSetup {
  string mode                   = 1;            // "pong", "pongio", or "pongbr"
  string gameId                 = 2;            // "pong", "pongio", or "pongbr"
  repeated string players       = 3;            // user IDs
  map<string,string> options    = 4;           // any key/value overrides
}
// ─── Player Inputs (ui-service → game-manager) ───────────────────────────────
message MatchInput {
  string               gameId = 1;
  repeated PlayerInput inputs = 2;
}

