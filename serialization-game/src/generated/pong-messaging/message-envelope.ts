// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Body, unionToBody, unionListToBody } from '../pong-messaging/body.js';


export class MessageEnvelope {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MessageEnvelope {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMessageEnvelope(bb:flatbuffers.ByteBuffer, obj?:MessageEnvelope):MessageEnvelope {
  return (obj || new MessageEnvelope()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMessageEnvelope(bb:flatbuffers.ByteBuffer, obj?:MessageEnvelope):MessageEnvelope {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MessageEnvelope()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

version():string|null
version(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
version(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

timestamp():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

correlationid():string|null
correlationid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
correlationid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

bodytypeType():Body {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Body.NONE;
}

bodytype<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

bodyType():Body {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Body.NONE;
}

body<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startMessageEnvelope(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addVersion(builder:flatbuffers.Builder, versionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, versionOffset, 0);
}

static addTimestamp(builder:flatbuffers.Builder, timestamp:bigint) {
  builder.addFieldInt64(1, timestamp, BigInt('0'));
}

static addCorrelationid(builder:flatbuffers.Builder, correlationidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, correlationidOffset, 0);
}

static addBodytypeType(builder:flatbuffers.Builder, bodytypeType:Body) {
  builder.addFieldInt8(3, bodytypeType, Body.NONE);
}

static addBodytype(builder:flatbuffers.Builder, bodytypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, bodytypeOffset, 0);
}

static addBodyType(builder:flatbuffers.Builder, bodyType:Body) {
  builder.addFieldInt8(5, bodyType, Body.NONE);
}

static addBody(builder:flatbuffers.Builder, bodyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, bodyOffset, 0);
}

static endMessageEnvelope(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMessageEnvelopeBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedMessageEnvelopeBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createMessageEnvelope(builder:flatbuffers.Builder, versionOffset:flatbuffers.Offset, timestamp:bigint, correlationidOffset:flatbuffers.Offset, bodytypeType:Body, bodytypeOffset:flatbuffers.Offset, bodyType:Body, bodyOffset:flatbuffers.Offset):flatbuffers.Offset {
  MessageEnvelope.startMessageEnvelope(builder);
  MessageEnvelope.addVersion(builder, versionOffset);
  MessageEnvelope.addTimestamp(builder, timestamp);
  MessageEnvelope.addCorrelationid(builder, correlationidOffset);
  MessageEnvelope.addBodytypeType(builder, bodytypeType);
  MessageEnvelope.addBodytype(builder, bodytypeOffset);
  MessageEnvelope.addBodyType(builder, bodyType);
  MessageEnvelope.addBody(builder, bodyOffset);
  return MessageEnvelope.endMessageEnvelope(builder);
}
}
