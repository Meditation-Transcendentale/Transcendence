// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FullState } from '../game/full-state.js';
import { PlayerInput } from '../pong-messaging/player-input.js';


export class PhysicsRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PhysicsRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPhysicsRequest(bb:flatbuffers.ByteBuffer, obj?:PhysicsRequest):PhysicsRequest {
  return (obj || new PhysicsRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPhysicsRequest(bb:flatbuffers.ByteBuffer, obj?:PhysicsRequest):PhysicsRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PhysicsRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

gameid():string|null
gameid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gameid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

laststate(obj?:FullState):FullState|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FullState()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

inputs(index: number, obj?:PlayerInput):PlayerInput|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new PlayerInput()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

inputsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startPhysicsRequest(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addGameid(builder:flatbuffers.Builder, gameidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, gameidOffset, 0);
}

static addLaststate(builder:flatbuffers.Builder, laststateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, laststateOffset, 0);
}

static addInputs(builder:flatbuffers.Builder, inputsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, inputsOffset, 0);
}

static createInputsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startInputsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endPhysicsRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
