// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class Paddle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Paddle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPaddle(bb:flatbuffers.ByteBuffer, obj?:Paddle):Paddle {
  return (obj || new Paddle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPaddle(bb:flatbuffers.ByteBuffer, obj?:Paddle):Paddle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Paddle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

offset():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

isconnected():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startPaddle(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt16(0, id, 0);
}

static addOffset(builder:flatbuffers.Builder, offset:number) {
  builder.addFieldInt16(1, offset, 0);
}

static addIsconnected(builder:flatbuffers.Builder, isconnected:boolean) {
  builder.addFieldInt8(2, +isconnected, +false);
}

static endPaddle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPaddle(builder:flatbuffers.Builder, id:number, offset:number, isconnected:boolean):flatbuffers.Offset {
  Paddle.startPaddle(builder);
  Paddle.addId(builder, id);
  Paddle.addOffset(builder, offset);
  Paddle.addIsconnected(builder, isconnected);
  return Paddle.endPaddle(builder);
}
}
