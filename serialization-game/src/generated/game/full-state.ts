// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Ball } from '../game/ball.js';
import { Paddle } from '../game/paddle.js';
import { ScoreEntry } from '../game/score-entry.js';


export class FullState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FullState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFullState(bb:flatbuffers.ByteBuffer, obj?:FullState):FullState {
  return (obj || new FullState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFullState(bb:flatbuffers.ByteBuffer, obj?:FullState):FullState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FullState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

gameid():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

tick():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

balls(index: number, obj?:Ball):Ball|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Ball()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

ballsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

paddles(index: number, obj?:Paddle):Paddle|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Paddle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

paddlesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

ispaused():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isgameover():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

scores(index: number, obj?:ScoreEntry):ScoreEntry|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new ScoreEntry()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

scoresLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startFullState(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addGameid(builder:flatbuffers.Builder, gameid:number) {
  builder.addFieldInt32(0, gameid, 0);
}

static addTick(builder:flatbuffers.Builder, tick:number) {
  builder.addFieldInt32(1, tick, 0);
}

static addBalls(builder:flatbuffers.Builder, ballsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, ballsOffset, 0);
}

static createBallsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBallsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPaddles(builder:flatbuffers.Builder, paddlesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, paddlesOffset, 0);
}

static createPaddlesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPaddlesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addIspaused(builder:flatbuffers.Builder, ispaused:boolean) {
  builder.addFieldInt8(4, +ispaused, +false);
}

static addIsgameover(builder:flatbuffers.Builder, isgameover:boolean) {
  builder.addFieldInt8(5, +isgameover, +false);
}

static addScores(builder:flatbuffers.Builder, scoresOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, scoresOffset, 0);
}

static createScoresVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startScoresVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endFullState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFullState(builder:flatbuffers.Builder, gameid:number, tick:number, ballsOffset:flatbuffers.Offset, paddlesOffset:flatbuffers.Offset, ispaused:boolean, isgameover:boolean, scoresOffset:flatbuffers.Offset):flatbuffers.Offset {
  FullState.startFullState(builder);
  FullState.addGameid(builder, gameid);
  FullState.addTick(builder, tick);
  FullState.addBalls(builder, ballsOffset);
  FullState.addPaddles(builder, paddlesOffset);
  FullState.addIspaused(builder, ispaused);
  FullState.addIsgameover(builder, isgameover);
  FullState.addScores(builder, scoresOffset);
  return FullState.endFullState(builder);
}
}
