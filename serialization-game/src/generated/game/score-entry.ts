// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ScoreEntry {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ScoreEntry {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsScoreEntry(bb:flatbuffers.ByteBuffer, obj?:ScoreEntry):ScoreEntry {
  return (obj || new ScoreEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsScoreEntry(bb:flatbuffers.ByteBuffer, obj?:ScoreEntry):ScoreEntry {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ScoreEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

playerid():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

score():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startScoreEntry(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPlayerid(builder:flatbuffers.Builder, playerid:number) {
  builder.addFieldInt16(0, playerid, 0);
}

static addScore(builder:flatbuffers.Builder, score:number) {
  builder.addFieldInt16(1, score, 0);
}

static endScoreEntry(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createScoreEntry(builder:flatbuffers.Builder, playerid:number, score:number):flatbuffers.Offset {
  ScoreEntry.startScoreEntry(builder);
  ScoreEntry.addPlayerid(builder, playerid);
  ScoreEntry.addScore(builder, score);
  return ScoreEntry.endScoreEntry(builder);
}
}
