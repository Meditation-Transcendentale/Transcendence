// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class Ball {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Ball {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBall(bb:flatbuffers.ByteBuffer, obj?:Ball):Ball {
  return (obj || new Ball()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBall(bb:flatbuffers.ByteBuffer, obj?:Ball):Ball {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Ball()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

x():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

y():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

vx():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

vy():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

static startBall(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt16(0, id, 0);
}

static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldInt16(1, x, 0);
}

static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldInt16(2, y, 0);
}

static addVx(builder:flatbuffers.Builder, vx:number) {
  builder.addFieldInt16(3, vx, 0);
}

static addVy(builder:flatbuffers.Builder, vy:number) {
  builder.addFieldInt16(4, vy, 0);
}

static endBall(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBall(builder:flatbuffers.Builder, id:number, x:number, y:number, vx:number, vy:number):flatbuffers.Offset {
  Ball.startBall(builder);
  Ball.addId(builder, id);
  Ball.addX(builder, x);
  Ball.addY(builder, y);
  Ball.addVx(builder, vx);
  Ball.addVy(builder, vy);
  return Ball.endBall(builder);
}
}
